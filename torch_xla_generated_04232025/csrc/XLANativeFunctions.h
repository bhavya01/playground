#pragma once

// an external backend might generate file within its code tree
// and check all the source files within the tree with clang-format.
// so, disable it since the backend might have a different config.
// clang-format off

// Autogenerated file by gen_backend_stubs.py. Do not edit directly!

#include <ATen/Tensor.h>

namespace torch_xla {

struct XLANativeFunctions {

static ::std::tuple<at::Tensor &,at::Tensor &> max_out(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & max, at::Tensor & max_values);
static ::std::tuple<at::Tensor &,at::Tensor &> min_out(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & min, at::Tensor & min_indices);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> _embedding_bag_forward_only(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const ::std::optional<at::Tensor> & per_sample_weights, bool include_last_offset, int64_t padding_idx);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> _linalg_slogdet(const at::Tensor & A);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> _linalg_svd(const at::Tensor & A, bool full_matrices, bool compute_uv, ::std::optional<c10::string_view> driver);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> _native_batch_norm_legit(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, at::Tensor & running_mean, at::Tensor & running_var, bool training, double momentum, double eps);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> _native_batch_norm_legit(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, bool training, double momentum, double eps);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> convolution_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & weight, at::OptionalIntArrayRef bias_sizes, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> convolution_backward_overrideable(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & weight, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_batch_norm(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, const ::std::optional<at::Tensor> & running_mean, const ::std::optional<at::Tensor> & running_var, bool training, double momentum, double eps);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_batch_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & running_mean, const ::std::optional<at::Tensor> & running_var, const ::std::optional<at::Tensor> & save_mean, const ::std::optional<at::Tensor> & save_invstd, bool train, double eps, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> svd(const at::Tensor & self, bool some, bool compute_uv);
static ::std::tuple<at::Tensor,at::Tensor> _linalg_eigh(const at::Tensor & A, c10::string_view UPLO, bool compute_v);
static ::std::tuple<at::Tensor,at::Tensor> _pack_padded_sequence(const at::Tensor & input, const at::Tensor & lengths, bool batch_first);
static ::std::tuple<at::Tensor,at::Tensor> _prelu_kernel_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight);
static ::std::tuple<at::Tensor,at::Tensor> adaptive_max_pool2d(const at::Tensor & self, at::IntArrayRef output_size);
static ::std::tuple<at::Tensor,at::Tensor> cummax(const at::Tensor & self, int64_t dim);
static ::std::tuple<at::Tensor,at::Tensor> kthvalue(const at::Tensor & self, int64_t k, int64_t dim, bool keepdim);
static ::std::tuple<at::Tensor,at::Tensor> linalg_inv_ex(const at::Tensor & A, bool check_errors);
static ::std::tuple<at::Tensor,at::Tensor> log_sigmoid_forward(const at::Tensor & self);
static ::std::tuple<at::Tensor,at::Tensor> max(const at::Tensor & self, int64_t dim, bool keepdim);
static ::std::tuple<at::Tensor,at::Tensor> max_pool2d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode);
static ::std::tuple<at::Tensor,at::Tensor> max_pool3d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode);
static ::std::tuple<at::Tensor,at::Tensor> min(const at::Tensor & self, int64_t dim, bool keepdim);
static ::std::tuple<at::Tensor,at::Tensor> native_dropout(const at::Tensor & input, double p, ::std::optional<bool> train);
static ::std::tuple<at::Tensor,at::Tensor> nll_loss2d_forward(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index);
static ::std::tuple<at::Tensor,at::Tensor> nll_loss_forward(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index);
static ::std::tuple<at::Tensor,at::Tensor> qr(const at::Tensor & self, bool some);
static ::std::tuple<at::Tensor,at::Tensor> sort(const at::Tensor & self, ::std::optional<bool> stable, int64_t dim, bool descending);
static ::std::tuple<at::Tensor,at::Tensor> sort(const at::Tensor & self, int64_t dim, bool descending);
static ::std::tuple<at::Tensor,at::Tensor> std_mean(const at::Tensor & self, at::OptionalIntArrayRef dim, const ::std::optional<at::Scalar> & correction, bool keepdim);
static ::std::tuple<at::Tensor,at::Tensor> topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted);
static ::std::tuple<at::Tensor,at::Tensor> triangular_solve(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular);
static ::std::tuple<at::Tensor,at::Tensor> var_mean(const at::Tensor & self, at::OptionalIntArrayRef dim, const ::std::optional<at::Scalar> & correction, bool keepdim);
static ::std::vector<at::Tensor> _to_cpu(at::TensorList tensors);
static ::std::vector<at::Tensor> split_copy(const at::Tensor & self, int64_t split_size, int64_t dim);
static ::std::vector<at::Tensor> split_with_sizes_copy(const at::Tensor & self, at::IntArrayRef split_sizes, int64_t dim);
static ::std::vector<at::Tensor> unbind_copy(const at::Tensor & self, int64_t dim);
static at::Scalar _local_scalar_dense(const at::Tensor & self);
static at::Tensor & __ilshift__(at::Tensor & self, const at::Scalar & other);
static at::Tensor & __ilshift__(at::Tensor & self, const at::Tensor & other);
static at::Tensor & __irshift__(at::Tensor & self, const at::Scalar & other);
static at::Tensor & __irshift__(at::Tensor & self, const at::Tensor & other);
static at::Tensor & _amp_update_scale_(at::Tensor & self, at::Tensor & growth_tracker, const at::Tensor & found_inf, double scale_growth_factor, double scale_backoff_factor, int64_t growth_interval);
static at::Tensor & _index_put_impl_(at::Tensor & self, const c10::List<::std::optional<at::Tensor>> & indices, const at::Tensor & values, bool accumulate, bool unsafe);
static at::Tensor & arange_out(const at::Scalar & start, const at::Scalar & end, const at::Scalar & step, at::Tensor & out);
static at::Tensor & bernoulli_(at::Tensor & self, const at::Tensor & p, ::std::optional<at::Generator> generator);
static at::Tensor & celu_(at::Tensor & self, const at::Scalar & alpha);
static at::Tensor & copy_(at::Tensor & self, const at::Tensor & src, bool non_blocking);
static at::Tensor & exponential_(at::Tensor & self, double lambd, ::std::optional<at::Generator> generator);
static at::Tensor & eye_out(int64_t n, at::Tensor & out);
static at::Tensor & eye_out(int64_t n, int64_t m, at::Tensor & out);
static at::Tensor & fill_(at::Tensor & self, const at::Scalar & value);
static at::Tensor & fill_(at::Tensor & self, const at::Tensor & value);
static at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value);
static at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value);
static at::Tensor & index_put_(at::Tensor & self, const c10::List<::std::optional<at::Tensor>> & indices, const at::Tensor & values, bool accumulate);
static at::Tensor & mv_out(const at::Tensor & self, const at::Tensor & vec, at::Tensor & out);
static at::Tensor & normal_(at::Tensor & self, double mean, double std, ::std::optional<at::Generator> generator);
static at::Tensor & put_(at::Tensor & self, const at::Tensor & index, const at::Tensor & source, bool accumulate);
static at::Tensor & random_(at::Tensor & self, ::std::optional<at::Generator> generator);
static at::Tensor & random_(at::Tensor & self, int64_t from, ::std::optional<int64_t> to, ::std::optional<at::Generator> generator);
static at::Tensor & random_(at::Tensor & self, int64_t to, ::std::optional<at::Generator> generator);
static at::Tensor & selu_(at::Tensor & self);
static at::Tensor & set_(at::Tensor & self, const at::Tensor & source);
static at::Tensor & uniform_(at::Tensor & self, double from, double to, ::std::optional<at::Generator> generator);
static at::Tensor & zero_(at::Tensor & self);
static at::Tensor __lshift__(const at::Tensor & self, const at::Scalar & other);
static at::Tensor __lshift__(const at::Tensor & self, const at::Tensor & other);
static at::Tensor __rshift__(const at::Tensor & self, const at::Scalar & other);
static at::Tensor __rshift__(const at::Tensor & self, const at::Tensor & other);
static at::Tensor _adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size);
static at::Tensor _adaptive_avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self);
static at::Tensor _adaptive_avg_pool3d(const at::Tensor & self, at::IntArrayRef output_size);
static at::Tensor _adaptive_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self);
static at::Tensor _cdist_forward(const at::Tensor & x1, const at::Tensor & x2, double p, ::std::optional<int64_t> compute_mode);
static at::Tensor _conj_copy(const at::Tensor & self);
static at::Tensor _convolution(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32);
static at::Tensor _copy_from(const at::Tensor & self, const at::Tensor & dst, bool non_blocking);
static at::Tensor _copy_from_and_resize(const at::Tensor & self, const at::Tensor & dst);
static at::Tensor _embedding_bag_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, const at::Tensor & bag_size, const at::Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const ::std::optional<at::Tensor> & per_sample_weights, int64_t padding_idx);
static at::Tensor _euclidean_dist(const at::Tensor & x1, const at::Tensor & x2);
static at::Tensor _log_softmax(const at::Tensor & self, int64_t dim, bool half_to_float);
static at::Tensor _log_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, at::ScalarType input_dtype);
static at::Tensor _pdist_forward(const at::Tensor & self, double p);
static at::Tensor _prelu_kernel(const at::Tensor & self, const at::Tensor & weight);
static at::Tensor _softmax(const at::Tensor & self, int64_t dim, bool half_to_float);
static at::Tensor _softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, at::ScalarType input_dtype);
static at::Tensor _to_copy(const at::Tensor & self, ::std::optional<at::ScalarType> dtype, ::std::optional<at::Layout> layout, ::std::optional<at::Device> device, ::std::optional<bool> pin_memory, bool non_blocking, ::std::optional<at::MemoryFormat> memory_format);
static at::Tensor _trilinear(const at::Tensor & i1, const at::Tensor & i2, const at::Tensor & i3, at::IntArrayRef expand1, at::IntArrayRef expand2, at::IntArrayRef expand3, at::IntArrayRef sumdim, int64_t unroll_dim);
static at::Tensor _unsafe_view(const at::Tensor & self, at::IntArrayRef size);
static at::Tensor abs(const at::Tensor & self);
static at::Tensor acos(const at::Tensor & self);
static at::Tensor acosh(const at::Tensor & self);
static at::Tensor adaptive_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices);
static at::Tensor add(const at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha);
static at::Tensor add(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha);
static at::Tensor addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value);
static at::Tensor addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value);
static at::Tensor addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha);
static at::Tensor affine_grid_generator(const at::Tensor & theta, at::IntArrayRef size, bool align_corners);
static at::Tensor alias(const at::Tensor & self);
static at::Tensor alias_copy(const at::Tensor & self);
static at::Tensor all(const at::Tensor & self);
static at::Tensor all(const at::Tensor & self, int64_t dim, bool keepdim);
static at::Tensor amax(const at::Tensor & self, at::IntArrayRef dim, bool keepdim);
static at::Tensor amin(const at::Tensor & self, at::IntArrayRef dim, bool keepdim);
static at::Tensor any(const at::Tensor & self);
static at::Tensor any(const at::Tensor & self, int64_t dim, bool keepdim);
static at::Tensor argmax(const at::Tensor & self, ::std::optional<int64_t> dim, bool keepdim);
static at::Tensor argmin(const at::Tensor & self, ::std::optional<int64_t> dim, bool keepdim);
static at::Tensor as_strided(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, ::std::optional<int64_t> storage_offset);
static at::Tensor as_strided_copy(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, ::std::optional<int64_t> storage_offset);
static at::Tensor as_strided_scatter(const at::Tensor & self, const at::Tensor & src, at::IntArrayRef size, at::IntArrayRef stride, ::std::optional<int64_t> storage_offset);
static at::Tensor asin(const at::Tensor & self);
static at::Tensor asinh(const at::Tensor & self);
static at::Tensor atan(const at::Tensor & self);
static at::Tensor atan2(const at::Tensor & self, const at::Tensor & other);
static at::Tensor atanh(const at::Tensor & self);
static at::Tensor avg_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, ::std::optional<int64_t> divisor_override);
static at::Tensor avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, ::std::optional<int64_t> divisor_override);
static at::Tensor avg_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, ::std::optional<int64_t> divisor_override);
static at::Tensor avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, ::std::optional<int64_t> divisor_override);
static at::Tensor baddbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha);
static at::Tensor bernoulli(const at::Tensor & self, ::std::optional<at::Generator> generator);
static at::Tensor bernoulli(const at::Tensor & self, double p, ::std::optional<at::Generator> generator);
static at::Tensor binary_cross_entropy(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction);
static at::Tensor binary_cross_entropy_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction);
static at::Tensor binary_cross_entropy_with_logits(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & pos_weight, int64_t reduction);
static at::Tensor bitwise_and(const at::Tensor & self, const at::Tensor & other);
static at::Tensor bitwise_left_shift(const at::Tensor & self, const at::Tensor & other);
static at::Tensor bitwise_not(const at::Tensor & self);
static at::Tensor bitwise_or(const at::Tensor & self, const at::Tensor & other);
static at::Tensor bitwise_right_shift(const at::Tensor & self, const at::Tensor & other);
static at::Tensor bitwise_xor(const at::Tensor & self, const at::Tensor & other);
static at::Tensor block_diag(at::TensorList tensors);
static at::Tensor bmm(const at::Tensor & self, const at::Tensor & mat2);
static at::Tensor cat(const at::ITensorListRef & tensors, int64_t dim);
static at::Tensor ceil(const at::Tensor & self);
static at::Tensor celu(const at::Tensor & self, const at::Scalar & alpha);
static at::Tensor cholesky(const at::Tensor & self, bool upper);
static at::Tensor clamp(const at::Tensor & self, const ::std::optional<at::Scalar> & min, const ::std::optional<at::Scalar> & max);
static at::Tensor clamp(const at::Tensor & self, const ::std::optional<at::Tensor> & min, const ::std::optional<at::Tensor> & max);
static at::Tensor clamp_max(const at::Tensor & self, const at::Scalar & max);
static at::Tensor clamp_max(const at::Tensor & self, const at::Tensor & max);
static at::Tensor clamp_min(const at::Tensor & self, const at::Scalar & min);
static at::Tensor clamp_min(const at::Tensor & self, const at::Tensor & min);
static at::Tensor clone(const at::Tensor & self, ::std::optional<at::MemoryFormat> memory_format);
static at::Tensor constant_pad_nd(const at::Tensor & self, at::IntArrayRef pad, const at::Scalar & value);
static at::Tensor convolution_overrideable(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups);
static at::Tensor copy(const at::Tensor & self, const at::Tensor & src, bool non_blocking);
static at::Tensor cos(const at::Tensor & self);
static at::Tensor cosh(const at::Tensor & self);
static at::Tensor count_nonzero(const at::Tensor & self, ::std::optional<int64_t> dim);
static at::Tensor count_nonzero(const at::Tensor & self, at::IntArrayRef dim);
static at::Tensor cross(const at::Tensor & self, const at::Tensor & other, ::std::optional<int64_t> dim);
static at::Tensor cumprod(const at::Tensor & self, int64_t dim, ::std::optional<at::ScalarType> dtype);
static at::Tensor cumsum(const at::Tensor & self, int64_t dim, ::std::optional<at::ScalarType> dtype);
static at::Tensor detach_copy(const at::Tensor & self);
static at::Tensor diag(const at::Tensor & self, int64_t diagonal);
static at::Tensor diag_embed(const at::Tensor & self, int64_t offset, int64_t dim1, int64_t dim2);
static at::Tensor diagonal(const at::Tensor & self, int64_t offset, int64_t dim1, int64_t dim2);
static at::Tensor diagonal_backward_symint(const at::Tensor & grad_output, c10::SymIntArrayRef input_sizes, int64_t offset, int64_t dim1, int64_t dim2);
static at::Tensor diagonal_copy(const at::Tensor & self, int64_t offset, int64_t dim1, int64_t dim2);
static at::Tensor diagonal_scatter(const at::Tensor & self, const at::Tensor & src, int64_t offset, int64_t dim1, int64_t dim2);
static at::Tensor div(const at::Tensor & self, const at::Scalar & other);
static at::Tensor div(const at::Tensor & self, const at::Tensor & other);
static at::Tensor div(const at::Tensor & self, const at::Tensor & other, ::std::optional<c10::string_view> rounding_mode);
static at::Tensor dot(const at::Tensor & self, const at::Tensor & tensor);
static at::Tensor elu(const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale);
static at::Tensor elu_backward(const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result);
static at::Tensor embedding_dense_backward(const at::Tensor & grad_output, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);
static at::Tensor embedding_symint(const at::Tensor & weight, const at::Tensor & indices, c10::SymInt padding_idx, bool scale_grad_by_freq, bool sparse);
static at::Tensor empty_strided_symint(c10::SymIntArrayRef size, c10::SymIntArrayRef stride, ::std::optional<at::ScalarType> dtype, ::std::optional<at::Layout> layout, ::std::optional<at::Device> device, ::std::optional<bool> pin_memory);
static at::Tensor empty_symint(c10::SymIntArrayRef size, ::std::optional<at::ScalarType> dtype, ::std::optional<at::Layout> layout, ::std::optional<at::Device> device, ::std::optional<bool> pin_memory, ::std::optional<at::MemoryFormat> memory_format);
static at::Tensor eq(const at::Tensor & self, const at::Scalar & other);
static at::Tensor eq(const at::Tensor & self, const at::Tensor & other);
static at::Tensor erf(const at::Tensor & self);
static at::Tensor erfc(const at::Tensor & self);
static at::Tensor erfinv(const at::Tensor & self);
static at::Tensor exp(const at::Tensor & self);
static at::Tensor expand_copy_symint(const at::Tensor & self, c10::SymIntArrayRef size, bool implicit);
static at::Tensor expand_symint(const at::Tensor & self, c10::SymIntArrayRef size, bool implicit);
static at::Tensor expm1(const at::Tensor & self);
static at::Tensor flip(const at::Tensor & self, at::IntArrayRef dims);
static at::Tensor floor(const at::Tensor & self);
static at::Tensor floor_divide(const at::Tensor & self, const at::Tensor & other);
static at::Tensor fmod(const at::Tensor & self, const at::Scalar & other);
static at::Tensor fmod(const at::Tensor & self, const at::Tensor & other);
static at::Tensor frac(const at::Tensor & self);
static at::Tensor full(at::IntArrayRef size, const at::Scalar & fill_value, ::std::optional<at::ScalarType> dtype, ::std::optional<at::Layout> layout, ::std::optional<at::Device> device, ::std::optional<bool> pin_memory);
static at::Tensor gather(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad);
static at::Tensor ge(const at::Tensor & self, const at::Scalar & other);
static at::Tensor ge(const at::Tensor & self, const at::Tensor & other);
static at::Tensor gelu(const at::Tensor & self, c10::string_view approximate);
static at::Tensor gelu_backward(const at::Tensor & grad_output, const at::Tensor & self, c10::string_view approximate);
static at::Tensor glu(const at::Tensor & self, int64_t dim);
static at::Tensor gt(const at::Tensor & self, const at::Scalar & other);
static at::Tensor gt(const at::Tensor & self, const at::Tensor & other);
static at::Tensor hardshrink(const at::Tensor & self, const at::Scalar & lambd);
static at::Tensor hardshrink_backward(const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd);
static at::Tensor hardsigmoid(const at::Tensor & self);
static at::Tensor hardsigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self);
static at::Tensor hardswish(const at::Tensor & self);
static at::Tensor hardswish_backward(const at::Tensor & grad_output, const at::Tensor & self);
static at::Tensor hardtanh(const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val);
static at::Tensor hardtanh_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val);
static at::Tensor index(const at::Tensor & self, const c10::List<::std::optional<at::Tensor>> & indices);
static at::Tensor index_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source, const at::Scalar & alpha);
static at::Tensor index_copy(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source);
static at::Tensor index_select(const at::Tensor & self, int64_t dim, const at::Tensor & index);
static at::Tensor inverse(const at::Tensor & self);
static at::Tensor isnan(const at::Tensor & self);
static at::Tensor isneginf(const at::Tensor & self);
static at::Tensor kl_div(const at::Tensor & self, const at::Tensor & target, int64_t reduction, bool log_target);
static at::Tensor le(const at::Tensor & self, const at::Scalar & other);
static at::Tensor le(const at::Tensor & self, const at::Tensor & other);
static at::Tensor leaky_relu(const at::Tensor & self, const at::Scalar & negative_slope);
static at::Tensor leaky_relu_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result);
static at::Tensor lerp(const at::Tensor & self, const at::Tensor & end, const at::Scalar & weight);
static at::Tensor lerp(const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight);
static at::Tensor lift(const at::Tensor & self);
static at::Tensor lift_fresh(const at::Tensor & self);
static at::Tensor linalg_pinv(const at::Tensor & self, const ::std::optional<at::Tensor> & atol, const ::std::optional<at::Tensor> & rtol, bool hermitian);
static at::Tensor linalg_vector_norm(const at::Tensor & self, const at::Scalar & ord, at::OptionalIntArrayRef dim, bool keepdim, ::std::optional<at::ScalarType> dtype);
static at::Tensor linspace(const at::Scalar & start, const at::Scalar & end, int64_t steps, ::std::optional<at::ScalarType> dtype, ::std::optional<at::Layout> layout, ::std::optional<at::Device> device, ::std::optional<bool> pin_memory);
static at::Tensor log(const at::Tensor & self);
static at::Tensor log10(const at::Tensor & self);
static at::Tensor log1p(const at::Tensor & self);
static at::Tensor log2(const at::Tensor & self);
static at::Tensor log_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer);
static at::Tensor logdet(const at::Tensor & self);
static at::Tensor logical_and(const at::Tensor & self, const at::Tensor & other);
static at::Tensor logical_not(const at::Tensor & self);
static at::Tensor logical_or(const at::Tensor & self, const at::Tensor & other);
static at::Tensor logical_xor(const at::Tensor & self, const at::Tensor & other);
static at::Tensor logit(const at::Tensor & self, ::std::optional<double> eps);
static at::Tensor logsumexp(const at::Tensor & self, at::IntArrayRef dim, bool keepdim);
static at::Tensor lt(const at::Tensor & self, const at::Scalar & other);
static at::Tensor lt(const at::Tensor & self, const at::Tensor & other);
static at::Tensor masked_fill(const at::Tensor & self, const at::Tensor & mask, const at::Scalar & value);
static at::Tensor masked_fill(const at::Tensor & self, const at::Tensor & mask, const at::Tensor & value);
static at::Tensor masked_scatter(const at::Tensor & self, const at::Tensor & mask, const at::Tensor & source);
static at::Tensor masked_select(const at::Tensor & self, const at::Tensor & mask);
static at::Tensor max(const at::Tensor & self);
static at::Tensor max_pool2d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices);
static at::Tensor max_pool3d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices);
static at::Tensor max_unpool2d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size);
static at::Tensor max_unpool3d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding);
static at::Tensor maximum(const at::Tensor & self, const at::Tensor & other);
static at::Tensor mean(const at::Tensor & self, ::std::optional<at::ScalarType> dtype);
static at::Tensor mean(const at::Tensor & self, at::OptionalIntArrayRef dim, bool keepdim, ::std::optional<at::ScalarType> dtype);
static at::Tensor min(const at::Tensor & self);
static at::Tensor minimum(const at::Tensor & self, const at::Tensor & other);
static at::Tensor mish(const at::Tensor & self);
static at::Tensor mm(const at::Tensor & self, const at::Tensor & mat2);
static at::Tensor mse_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction);
static at::Tensor mse_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
static at::Tensor mul(const at::Tensor & self, const at::Scalar & other);
static at::Tensor mul(const at::Tensor & self, const at::Tensor & other);
static at::Tensor multinomial(const at::Tensor & self, int64_t num_samples, bool replacement, ::std::optional<at::Generator> generator);
static at::Tensor mv(const at::Tensor & self, const at::Tensor & vec);
static at::Tensor mvlgamma(const at::Tensor & self, int64_t p);
static at::Tensor nan_to_num(const at::Tensor & self, ::std::optional<double> nan, ::std::optional<double> posinf, ::std::optional<double> neginf);
static at::Tensor narrow_copy_symint(const at::Tensor & self, int64_t dim, c10::SymInt start, c10::SymInt length);
static at::Tensor native_dropout_backward(const at::Tensor & grad_output, const at::Tensor & mask, double scale);
static at::Tensor ne(const at::Tensor & self, const at::Scalar & other);
static at::Tensor ne(const at::Tensor & self, const at::Tensor & other);
static at::Tensor neg(const at::Tensor & self);
static at::Tensor new_empty_strided_symint(const at::Tensor & self, c10::SymIntArrayRef size, c10::SymIntArrayRef stride, ::std::optional<at::ScalarType> dtype, ::std::optional<at::Layout> layout, ::std::optional<at::Device> device, ::std::optional<bool> pin_memory);
static at::Tensor nll_loss2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight);
static at::Tensor nll_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight);
static at::Tensor nonzero(const at::Tensor & self);
static at::Tensor norm(const at::Tensor & self, const ::std::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim);
static at::Tensor norm(const at::Tensor & self, const ::std::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype);
static at::Tensor norm(const at::Tensor & self, const ::std::optional<at::Scalar> & p, at::ScalarType dtype);
static at::Tensor norm(const at::Tensor & self, const at::Scalar & p);
static at::Tensor normal(const at::Tensor & mean, const at::Tensor & std, ::std::optional<at::Generator> generator);
static at::Tensor normal(const at::Tensor & mean, double std, ::std::optional<at::Generator> generator);
static at::Tensor normal(double mean, const at::Tensor & std, ::std::optional<at::Generator> generator);
static at::Tensor permute(const at::Tensor & self, at::IntArrayRef dims);
static at::Tensor permute_copy(const at::Tensor & self, at::IntArrayRef dims);
static at::Tensor pixel_shuffle(const at::Tensor & self, int64_t upscale_factor);
static at::Tensor pixel_unshuffle(const at::Tensor & self, int64_t downscale_factor);
static at::Tensor pow(const at::Scalar & self, const at::Tensor & exponent);
static at::Tensor pow(const at::Tensor & self, const at::Scalar & exponent);
static at::Tensor pow(const at::Tensor & self, const at::Tensor & exponent);
static at::Tensor prod(const at::Tensor & self, ::std::optional<at::ScalarType> dtype);
static at::Tensor prod(const at::Tensor & self, int64_t dim, bool keepdim, ::std::optional<at::ScalarType> dtype);
static at::Tensor randperm(int64_t n, ::std::optional<at::ScalarType> dtype, ::std::optional<at::Layout> layout, ::std::optional<at::Device> device, ::std::optional<bool> pin_memory);
static at::Tensor reciprocal(const at::Tensor & self);
static at::Tensor reflection_pad1d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor reflection_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor reflection_pad2d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor reflection_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor reflection_pad3d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor reflection_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor relu(const at::Tensor & self);
static at::Tensor remainder(const at::Tensor & self, const at::Scalar & other);
static at::Tensor remainder(const at::Tensor & self, const at::Tensor & other);
static at::Tensor repeat(const at::Tensor & self, at::IntArrayRef repeats);
static at::Tensor replication_pad1d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor replication_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor replication_pad2d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor replication_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor replication_pad3d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor replication_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor roll(const at::Tensor & self, at::IntArrayRef shifts, at::IntArrayRef dims);
static at::Tensor round(const at::Tensor & self);
static at::Tensor rrelu_with_noise(const at::Tensor & self, at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, ::std::optional<at::Generator> generator);
static at::Tensor rrelu_with_noise_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, bool self_is_result);
static at::Tensor rsqrt(const at::Tensor & self);
static at::Tensor rsub(const at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha);
static at::Tensor rsub(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha);
static at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value);
static at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce);
static at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src);
static at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce);
static at::Tensor scatter_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src);
static at::Tensor scatter_reduce(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce, bool include_self);
static at::Tensor select_backward_symint(const at::Tensor & grad_output, c10::SymIntArrayRef input_sizes, int64_t dim, c10::SymInt index);
static at::Tensor select_copy(const at::Tensor & self, int64_t dim, int64_t index);
static at::Tensor select_scatter(const at::Tensor & self, const at::Tensor & src, int64_t dim, int64_t index);
static at::Tensor select_symint(const at::Tensor & self, int64_t dim, c10::SymInt index);
static at::Tensor selu(const at::Tensor & self);
static at::Tensor sgn(const at::Tensor & self);
static at::Tensor sigmoid(const at::Tensor & self);
static at::Tensor sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & output);
static at::Tensor sign(const at::Tensor & self);
static at::Tensor silu(const at::Tensor & self);
static at::Tensor silu_backward(const at::Tensor & grad_output, const at::Tensor & self);
static at::Tensor sin(const at::Tensor & self);
static at::Tensor sinh(const at::Tensor & self);
static at::Tensor slice(const at::Tensor & self, int64_t dim, ::std::optional<int64_t> start, ::std::optional<int64_t> end, int64_t step);
static at::Tensor slice_backward(const at::Tensor & grad_output, at::IntArrayRef input_sizes, int64_t dim, int64_t start, int64_t end, int64_t step);
static at::Tensor slice_copy(const at::Tensor & self, int64_t dim, ::std::optional<int64_t> start, ::std::optional<int64_t> end, int64_t step);
static at::Tensor slice_scatter(const at::Tensor & self, const at::Tensor & src, int64_t dim, ::std::optional<int64_t> start, ::std::optional<int64_t> end, int64_t step);
static at::Tensor smooth_l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta);
static at::Tensor smooth_l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta);
static at::Tensor softplus(const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold);
static at::Tensor softplus_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold);
static at::Tensor softshrink(const at::Tensor & self, const at::Scalar & lambd);
static at::Tensor softshrink_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd);
static at::Tensor sqrt(const at::Tensor & self);
static at::Tensor squeeze_copy(const at::Tensor & self);
static at::Tensor squeeze_copy(const at::Tensor & self, at::IntArrayRef dim);
static at::Tensor squeeze_copy(const at::Tensor & self, int64_t dim);
static at::Tensor stack(at::TensorList tensors, int64_t dim);
static at::Tensor std(const at::Tensor & self, at::OptionalIntArrayRef dim, bool unbiased, bool keepdim);
static at::Tensor std(const at::Tensor & self, at::OptionalIntArrayRef dim, const ::std::optional<at::Scalar> & correction, bool keepdim);
static at::Tensor std(const at::Tensor & self, bool unbiased);
static at::Tensor sub(const at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha);
static at::Tensor sub(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha);
static at::Tensor sum(const at::Tensor & self, ::std::optional<at::ScalarType> dtype);
static at::Tensor sum(const at::Tensor & self, at::OptionalIntArrayRef dim, bool keepdim, ::std::optional<at::ScalarType> dtype);
static at::Tensor t(const at::Tensor & self);
static at::Tensor t_copy(const at::Tensor & self);
static at::Tensor take(const at::Tensor & self, const at::Tensor & index);
static at::Tensor tan(const at::Tensor & self);
static at::Tensor tanh(const at::Tensor & self);
static at::Tensor tanh_backward(const at::Tensor & grad_output, const at::Tensor & output);
static at::Tensor threshold(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value);
static at::Tensor threshold_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold);
static at::Tensor trace(const at::Tensor & self);
static at::Tensor transpose_copy(const at::Tensor & self, int64_t dim0, int64_t dim1);
static at::Tensor tril(const at::Tensor & self, int64_t diagonal);
static at::Tensor triu(const at::Tensor & self, int64_t diagonal);
static at::Tensor trunc(const at::Tensor & self);
static at::Tensor unsqueeze_copy(const at::Tensor & self, int64_t dim);
static at::Tensor upsample_bilinear2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales_h, ::std::optional<double> scales_w);
static at::Tensor upsample_bilinear2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales_h, ::std::optional<double> scales_w);
static at::Tensor upsample_nearest2d(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales_h, ::std::optional<double> scales_w);
static at::Tensor upsample_nearest2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales_h, ::std::optional<double> scales_w);
static at::Tensor var(const at::Tensor & self, at::OptionalIntArrayRef dim, const ::std::optional<at::Scalar> & correction, bool keepdim);
static at::Tensor view_as_complex_copy(const at::Tensor & self);
static at::Tensor view_as_real_copy(const at::Tensor & self);
static at::Tensor view_copy_symint(const at::Tensor & self, c10::SymIntArrayRef size);
static at::Tensor view_symint(const at::Tensor & self, c10::SymIntArrayRef size);
static at::Tensor where(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other);
static at::Tensor xlogy(const at::Tensor & self, const at::Tensor & other);
static const at::Tensor & as_strided_(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, ::std::optional<int64_t> storage_offset);
static const at::Tensor & resize_(const at::Tensor & self, at::IntArrayRef size, ::std::optional<at::MemoryFormat> memory_format);
static void _amp_foreach_non_finite_check_and_unscale_(at::TensorList self, at::Tensor & found_inf, const at::Tensor & inv_scale);
static void _propagate_xla_data(const at::Tensor & input, const at::Tensor & output);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_group_norm(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_layer_norm(const at::Tensor & input, at::IntArrayRef normalized_shape, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, double eps);
static at::Tensor einsum(c10::string_view equation, at::TensorList tensors, at::OptionalIntArrayRef path);
static at::Tensor max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode);
static at::Tensor max_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode);

};
} // namespace torch_xla
